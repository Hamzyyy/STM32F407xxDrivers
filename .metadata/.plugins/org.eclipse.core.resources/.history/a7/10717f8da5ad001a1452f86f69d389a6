/*
 * stm32f407xx_SPI.c
 *
 *  Created on: Apr 26, 2020
 *      Author: Hamzy
 */

#include "stm32f407xx_SPI.h"



/*******************************************************************************
 *                        APIs supported by this driver
 *       for more information about the APIs check the functions definitions
 *                           APIs Implementations
 *
 *******************************************************************************/

/*************************** Peripheral Clock Setup ****************************
    * @func   - SPI_PClkControl
	* @brief  - Enables or disables peripheral clock
	* @param  - *SPIx : SPI peripheral Base address
	* @param  - clkValue : ENABLE or DISABLE
	* @return - None
	* @Note   - None
	***************************************************************************/
void SPI_PClkControl(SPI_RegDef_t *pSPIx, uint8_t clkValue)
{
	if (clkValue == ENABLE)
	{
		if (pSPIx == SPI1)
		{
		  SPI1_PCLK_EN();
		}
		else if (pSPIx == SPI2)
		{
			SPI2_PCLK_EN();
		}
		else if (pSPIx == SPI3)
		{
			SPI3_PCLK_EN();
		}
		else if (pSPIx == SPI4)
		{
			SPI4_PCLK_EN();
		}
	}
	else
	{
		if (pSPIx == SPI1)
		{
			SPI1_PCLK_DI();
		}
		else if (pSPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}
		else if (pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
		else if (pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}

/*************************** Peripheral Initialization ****************************
    * @func   - SPI_Init
	* @brief  - Initialize the SPIx peripheral
	* @param  - *pSPIHandle : pointer SPI handle structure
	* @return - None
	* @Note   - None
	***************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{



	// First let's configure CR1 register
	uint32_t temp = 0; // to be store all the values derived from user @ SPI_Handle_t then pass it to the CR1 register


	// 1. Configure the Device Mode
	temp |= (pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR);

	// 2. Configure the BusConfig
	// 2.1. If the Bus is full duplex
	if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
	{
		// 2.1.1. the BIDIMODE bit shall be cleared
		temp &= ~(1 << SPI_CR1_BIDIMODE); // BIDIMODE == 15 bit
	}
	//2.2.If the Bus is half duplex
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD)
	{
		// 2.1.1. the BIDIMODE bit shall be set
		temp |= (1 << SPI_CR1_BIDIMODE); // BIDIMODE == 15 bit
	}
	//2.3 if the bus is full duplex but receive only
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
	{
		//2.3.1. the BIDIMODE bit shall be cleared
		temp &= ~(1 << SPI_CR1_BIDIMODE); // BIDIMODE == 15 bit

		//2.3.2. the RXONLY bit shall be set
		temp |= (1 << SPI_CR1_RXONLY); // RXONLY == 10 bit
	}


	// 3. Configure SPI serial clock speed
	temp |= (pSPIHandle->SPI_Config.SPI_SCLKSpeed << SPI_CR1_BR); // baud rate bit are 3:5

	// 4. Configure the data frame format
	temp |= (pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF); // DFF bit == 11

	// 5.Configure clock phase
	temp |= (pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA); // CPHA bit == 0

	// 6. Configure clock polarity
	temp |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL); // CPOL bit == 1

	//7. Slave Select
	temp |= (pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);

	//7. Assign the temp value to the actual CR1 register
	pSPIHandle->pSPIx->CR1 |= temp;



	/******* Enabling the peripheral clock ********/
	SPI_PClkControl(pSPIHandle->pSPIx , ENABLE);
}

/*********************** Peripheral De-initialization ***************************
    * @func   - SPI_Init
	* @brief  - Deinitialize the SPI peripheral
	* @param  - *SPIx : SPI Peripheral Base address
	* @return - None
	* @Note   - None
	***************************************************************************/
void SPI_DeInit(SPI_RegDef_t *pSPIx)
{
	if (pSPIx == SPI1)
	{
		SPI1_REG_RESET();
	}
	else if (pSPIx == SPI2)
	{
		SPI2_REG_RESET();
	}
	else if (pSPIx == SPI3)
	{
		SPI3_REG_RESET();
	}
	else if (pSPIx == SPI4)
	{
		SPI4_REG_RESET();
	}
}


/*********************** SPI send Data ***************************
    * @func   - SPI_SendData
	* @brief  - Sending the data
	* @param  - *SPIx : SPI Peripheral Base address
	* @param  - *TxBuffer : pointer to data inside Tx buffer
	* @param  - *DataLength : Number of bits to be transmitted
	* @return - None
	* @Note   - None
	***************************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t DataLenght)
{
	// checking the length
	while(DataLenght > 0)
	{
		// 1. Wait until the Tx buffer is empty
		// as long as TXE == 0 keep waiting
		while (SPI_GetSPIstatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);

		// 2. check the DFF bit in the CR1
		if ( (pSPIx->CR1 & (1 << SPI_CR1_DFF) ) )
		{
			// the data frame format is 16-bits
			// Load the data in the DR
			pSPIx->DR = *( (uint16_t*) pTxBuffer); // type cast the pointer to 16 bit then dereference

			// decrement the data length twice
			DataLenght--;
			DataLenght--;

			// increment Tx pointer to points to the next data
			(uint16_t*)pTxBuffer++;
		}
		else
		{
			// the data frame format is 8-bits
			// Load the data in the DR
			pSPIx->DR = *pTxBuffer; // dereference

			// decrement the data length twice
			DataLenght--;

			// increment Tx pointer to points to the next data
			pTxBuffer ++;
		}
	}
}

/*********************** SPI Get a flag status ***************************
    * @func   - SPI_GetSPIstatus
	* @brief  - check if a flag is set or reset
	* @param  - *SPIx : SPI Peripheral Base address
	* @param  - FlagName : value @SPI_FLAG
	* @return - Flage Status values FLAG_SET / FLAG_RESER
	* @Note   - None
	***************************************************************************/
uint8_t SPI_GetSPIstatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
	if(pSPIx->SR & FlagName)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}

/*********************** SPI Peripheral Control ***************************
    * @func   - SPI_PControl
	* @brief  - Enabling / Disabling the SPI peripheral
	* @param  - *SPIx : SPI Peripheral Base address
	* @param  - SPIStatus: ENABLE / DISABLE
	* @Note   - None
***************************************************************************/

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t Status)
{
	if (Status == ENABLE)
	{
	    pSPIx->CR1 |= (1<<SPI_CR1_SPE);
	}
	else
	{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}

/*********************** SPI SSI Bit Configuration ***************************
    * @func   - SPI_SSIConfig
	* @brief  - Enabling / Disabling the multi master communication
	* @param  - *SPIx : SPI Peripheral Base address
	* @param  - Status: ENABLE / DISABLE
	* @Note   - None
***************************************************************************/
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t Status)
{
	if (Status == ENABLE)
	{
		pSPIx->CR2 |= (1<<SPI_CR2_SSOE);
	}
}
